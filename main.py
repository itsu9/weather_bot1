#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–Ω–æ–ø–æ–∫
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config import Config
from weather_service import WeatherService
from keyboards import (
    get_main_keyboard, 
    get_forecast_keyboard, 
    get_settings_keyboard,
    get_favorites_keyboard,
    get_inline_weather_keyboard,
    get_inline_forecast_keyboard,
    get_units_keyboard,
    get_language_keyboard
)
from utils import format_weather_message, format_forecast_message
from decorators import error_handler


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class WeatherStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_forecast_city = State()
    waiting_for_favorite_city = State()


class WeatherBot:
    def __init__(self):
        self.config = Config()
        self.bot = Bot(token=self.config.bot_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.weather_service = WeatherService(self.config.weather_api_key)
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
        self.user_favorites = {}
        
        self._setup_handlers()

    def _setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.start_handler, CommandStart())
        self.dp.message.register(self.help_handler, Command("help"))
        self.dp.message.register(self.weather_handler, Command("weather"))
        self.dp.message.register(self.forecast_handler, Command("forecast"))
        
        # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.dp.message.register(self.menu_current_weather, F.text == "üå°Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞")
        self.dp.message.register(self.menu_forecast, F.text == "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π")
        self.dp.message.register(self.menu_favorites, F.text == "üìç –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞")
        self.dp.message.register(self.menu_settings, F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.dp.message.register(self.menu_help, F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
        self.dp.message.register(self.menu_about, F.text == "üìä –û –±–æ—Ç–µ")
        
        # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        self.dp.message.register(self.back_to_menu, F.text.in_(["üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîô –í –º–µ–Ω—é", "üîô –ù–∞–∑–∞–¥"]))
        
        # –ö–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        self.dp.message.register(self.add_favorite_city, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥")
        self.dp.message.register(self.clear_favorites, F.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (–Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å üìç)
        self.dp.message.register(self.handle_favorite_city, F.text.startswith("üìç "))
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞
        self.dp.message.register(self.process_city_weather, WeatherStates.waiting_for_city)
        self.dp.message.register(self.process_city_forecast, WeatherStates.waiting_for_forecast_city)
        self.dp.message.register(self.process_add_favorite, WeatherStates.waiting_for_favorite_city)
        
        # Inline –∫–Ω–æ–ø–∫–∏ (callback queries)
        self.dp.callback_query.register(self.handle_callback)

    @error_handler
    async def start_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await state.clear()
        
        welcome_text = (
            "üå§Ô∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Weather Bot!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –º–∏—Ä–∞.\n\n"
            "üìç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /weather - —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n"
            "‚Ä¢ /forecast - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π\n"
            "‚Ä¢ /help - –ø–æ–º–æ—â—å\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await message.answer(
            welcome_text,
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )

    @error_handler
    async def help_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await state.clear()
        await self._send_help(message)

    @error_handler
    async def menu_help(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        await state.clear()
        await self._send_help(message)

    async def _send_help(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = (
            "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
            "üå°Ô∏è <b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞</b> - –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞\n"
            "üìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π</b> - –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n"
            "üìç <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞</b> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≥–æ—Ä–æ–¥–∞\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —è–∑—ã–∫–∞\n\n"
            "üí° <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
            "üèôÔ∏è <b>–ü—Ä–∏–º–µ—Ä—ã –≥–æ—Ä–æ–¥–æ–≤:</b>\n"
            "‚Ä¢ –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n"
            "‚Ä¢ London, New York\n"
            "‚Ä¢ –ü–∞—Ä–∏–∂, –ë–µ—Ä–ª–∏–Ω\n\n"
            "–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö."
        )
        
        await message.answer(
            help_text,
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )

    @error_handler
    async def menu_about(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'"""
        await state.clear()
        
        about_text = (
            "üìä <b>–û Weather Bot</b>\n\n"
            "ü§ñ <b>–í–µ—Ä—Å–∏—è:</b> 1.0.0\n"
            "üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> –ò—é–Ω—å 2025\n"
            "üåç <b>API:</b> OpenWeatherMap\n"
            "‚ö° <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b> aiogram 3.x, Python 3.9+\n\n"
            "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞\n"
            "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π —Å 3-—á–∞—Å–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
            "‚Ä¢ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:</b> –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "üìä <b>–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã:</b> OpenWeatherMap\n\n"
            "üí¨ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã!"
        )
        
        await message.answer(
            about_text,
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )

    @error_handler
    async def weather_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather"""
        await self._request_city_for_weather(message, state)

    @error_handler
    async def menu_current_weather(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞'"""
        await self._request_city_for_weather(message, state)

    async def _request_city_for_weather(self, message: Message, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã"""
        await state.set_state(WeatherStates.waiting_for_city)
        
        await message.answer(
            "üèôÔ∏è <b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ:",
            parse_mode='HTML'
        )

    @error_handler
    async def forecast_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /forecast"""
        await self._request_city_for_forecast(message, state)

    @error_handler
    async def menu_forecast(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π'"""
        await self._request_city_for_forecast(message, state)

    async def _request_city_for_forecast(self, message: Message, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        await state.set_state(WeatherStates.waiting_for_forecast_city)
        
        await message.answer(
            "üìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π:",
            parse_mode='HTML'
        )

    @error_handler
    async def menu_favorites(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞'"""
        await state.clear()
        
        user_id = message.from_user.id
        favorites = self.user_favorites.get(user_id, [])
        
        if favorites:
            text = (
                "üìç <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:</b>\n\n"
                f"–í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(favorites)} –≥–æ—Ä–æ–¥–æ–≤\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        else:
            text = (
                "üìç <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã!"
            )
        
        await message.answer(
            text,
            parse_mode='HTML',
            reply_markup=get_favorites_keyboard(favorites)
        )

    @error_handler
    async def add_favorite_city(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥'"""
        await state.set_state(WeatherStates.waiting_for_favorite_city)
        
        await message.answer(
            "üèôÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:",
            parse_mode='HTML'
        )

    @error_handler
    async def process_add_favorite(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        city = message.text.strip()
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥ (–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É)
        loading_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ä–æ–¥...")
        
        try:
            weather_data = await self.weather_service.get_current_weather(city)
            
            if weather_data:
                # –ì–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                if user_id not in self.user_favorites:
                    self.user_favorites[user_id] = []
                
                favorites = self.user_favorites[user_id]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
                city_name = weather_data.get('name', city)
                if city_name not in favorites:
                    if len(favorites) < 6:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        favorites.append(city_name)
                        await loading_msg.edit_text(
                            f"‚úÖ <b>–ì–æ—Ä–æ–¥ '{city_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!</b>\n\n"
                            f"–í—Å–µ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {len(favorites)}",
                            parse_mode='HTML'
                        )
                    else:
                        await loading_msg.edit_text(
                            "‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç</b>\n\n"
                            "–ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 6 –≥–æ—Ä–æ–¥–æ–≤. "
                            "–£–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–æ—Ä–æ–¥–æ–≤.",
                            parse_mode='HTML'
                        )
                else:
                    await loading_msg.edit_text(
                        f"‚ÑπÔ∏è <b>–ì–æ—Ä–æ–¥ '{city_name}' —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º</b>",
                        parse_mode='HTML'
                    )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                await asyncio.sleep(2)
                await message.answer(
                    "üìç –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:",
                    reply_markup=get_favorites_keyboard(self.user_favorites[user_id])
                )
                
            else:
                await loading_msg.edit_text(
                    f"‚ùå <b>–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
            await loading_msg.edit_text(
                "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )
        
        await state.clear()

    @error_handler
    async def handle_favorite_city(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥"""
        await state.clear()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (—É–±–∏—Ä–∞–µ–º üìç –∏ –ø—Ä–æ–±–µ–ª)
        city = message.text[2:].strip()
        
        loading_msg = await message.answer("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
        
        try:
            weather_data = await self.weather_service.get_current_weather(city)
            
            if weather_data:
                response_text = format_weather_message(weather_data)
                await loading_msg.edit_text(
                    response_text,
                    parse_mode='HTML',
                    reply_markup=get_inline_weather_keyboard(city)
                )
            else:
                await loading_msg.edit_text(
                    f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è '{city}'</b>",
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ {city}: {e}")
            await loading_msg.edit_text(
                "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )

    @error_handler
    async def clear_favorites(self, message: Message, state: FSMContext):
        """–û—á–∏—Å—Ç–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
        await state.clear()
        
        user_id = message.from_user.id
        
        if user_id in self.user_favorites:
            del self.user_favorites[user_id]
        
        await message.answer(
            "üóëÔ∏è <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –æ—á–∏—â–µ–Ω—ã</b>\n\n"
            "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —É–¥–∞–ª–µ–Ω—ã.",
            parse_mode='HTML',
            reply_markup=get_favorites_keyboard([])
        )

    @error_handler
    async def menu_settings(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
        await state.clear()
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:\n\n"
            "üå°Ô∏è <b>–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è</b> - –¶–µ–ª—å—Å–∏–π, –§–∞—Ä–µ–Ω–≥–µ–π—Ç –∏–ª–∏ –ö–µ–ª—å–≤–∏–Ω\n"
            "üåç <b>–Ø–∑—ã–∫</b> - —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –¥–∞–Ω–Ω—ã—Ö\n"
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b> - –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        )
        
        await message.answer(
            settings_text,
            parse_mode='HTML',
            reply_markup=get_settings_keyboard()
        )

    @error_handler
    async def back_to_menu(self, message: Message, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await state.clear()
        
        await message.answer(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )

    @error_handler
    async def process_city_weather(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã"""
        city = message.text.strip()
        
        loading_msg = await message.answer("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
        
        try:
            weather_data = await self.weather_service.get_current_weather(city)
            
            if weather_data:
                response_text = format_weather_message(weather_data)
                await loading_msg.edit_text(
                    response_text,
                    parse_mode='HTML',
                    reply_markup=get_inline_weather_keyboard(city)
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_main_keyboard()
                )
            else:
                await loading_msg.edit_text(
                    f"‚ùå <b>–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")
            await loading_msg.edit_text(
                "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.",
                parse_mode='HTML'
            )
        
        await state.clear()

    @error_handler
    async def process_city_forecast(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã"""
        city = message.text.strip()
        
        loading_msg = await message.answer("üîÑ –ü–æ–ª—É—á–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã...")
        
        try:
            forecast_data = await self.weather_service.get_forecast(city)
            
            if forecast_data:
                response_text = format_forecast_message(forecast_data)
                await loading_msg.edit_text(
                    response_text,
                    parse_mode='HTML',
                    reply_markup=get_inline_forecast_keyboard(city)
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–∞
                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_forecast_keyboard()
                )
            else:
                await loading_msg.edit_text(
                    f"‚ùå <b>–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {city}: {e}")
            await loading_msg.edit_text(
                "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.",
                parse_mode='HTML'
            )
        
        await state.clear()

    @error_handler
    async def handle_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        data = callback.data
        
        try:
            if data.startswith("refresh_weather:"):
                city = data.split(":", 1)[1]
                weather_data = await self.weather_service.get_current_weather(city)
                
                if weather_data:
                    response_text = format_weather_message(weather_data)
                    await callback.message.edit_text(
                        response_text,
                        parse_mode='HTML',
                        reply_markup=get_inline_weather_keyboard(city)
                    )
                    await callback.answer("üîÑ –ü–æ–≥–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                    
            elif data.startswith("refresh_forecast:"):
                city = data.split(":", 1)[1]
                forecast_data = await self.weather_service.get_forecast(city)
                
                if forecast_data:
                    response_text = format_forecast_message(forecast_data)
                    await callback.message.edit_text(
                        response_text,
                        parse_mode='HTML',
                        reply_markup=get_inline_forecast_keyboard(city)
                    )
                    await callback.answer("üîÑ –ü—Ä–æ–≥–Ω–æ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞", show_alert=True)
                    
            elif data.startswith("get_forecast:"):
                city = data.split(":", 1)[1]
                forecast_data = await self.weather_service.get_forecast(city)
                
                if forecast_data:
                    response_text = format_forecast_message(forecast_data)
                    await callback.message.answer(
                        response_text,
                        parse_mode='HTML',
                        reply_markup=get_inline_forecast_keyboard(city)
                    )
                    await callback.answer()
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞", show_alert=True)
                    
            elif data.startswith("current_weather:"):
                city = data.split(":", 1)[1]
                weather_data = await self.weather_service.get_current_weather(city)
                
                if weather_data:
                    response_text = format_weather_message(weather_data)
                    await callback.message.answer(
                        response_text,
                        parse_mode='HTML',
                        reply_markup=get_inline_weather_keyboard(city)
                    )
                    await callback.answer()
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã", show_alert=True)
                    
            elif data.startswith("add_favorite:"):
                city = data.split(":", 1)[1]
                user_id = callback.from_user.id
                
                if user_id not in self.user_favorites:
                    self.user_favorites[user_id] = []
                
                favorites = self.user_favorites[user_id]
                
                if city not in favorites:
                    if len(favorites) < 6:
                        favorites.append(city)
                        await callback.answer(f"‚≠ê {city} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
                    else:
                        await callback.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (6)", show_alert=True)
                else:
                    await callback.answer(f"‚ÑπÔ∏è {city} —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
                    
            elif data.startswith("units:"):
                unit = data.split(":", 1)[1]
                await callback.answer(f"üå°Ô∏è –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: {unit}")
                
            elif data.startswith("lang:"):
                lang = data.split(":", 1)[1]
                await callback.answer(f"üåç –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {lang}")
                
            else:
                await callback.answer("ü§ñ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Weather Bot —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–Ω–æ–ø–æ–∫...")
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.bot.session.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = WeatherBot()
    await bot.start_polling()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
