#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
"""

from datetime import datetime
from typing import Dict, List
import pytz

# from weather_service import WeatherService  # –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞


def format_weather_message(weather_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–æ–π
    
    Args:
        weather_data (Dict): –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if not weather_data:
        return "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã
    weather_emoji = get_weather_emoji(weather_data.get('icon', ''))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
    wind_direction = get_wind_direction(weather_data.get('wind_direction', 0))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞
    sunrise = weather_data.get('sunrise', datetime.now()).strftime('%H:%M')
    sunset = weather_data.get('sunset', datetime.now()).strftime('%H:%M')
    
    message = f"""
{weather_emoji} <b>{weather_data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, {weather_data.get('country', '')}</b>

üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {weather_data.get('temperature', 0)}¬∞C
ü§ö <b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:</b> {weather_data.get('feels_like', 0)}¬∞C
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {weather_data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üí® <b>–í–µ—Ç–µ—Ä:</b> {weather_data.get('wind_speed', 0)} –º/—Å {wind_direction}
üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {weather_data.get('humidity', 0)}%
üìä <b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {weather_data.get('pressure', 0)} –≥–ü–∞
‚òÅÔ∏è <b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {weather_data.get('cloudiness', 0)}%
üëÅÔ∏è <b>–í–∏–¥–∏–º–æ—Å—Ç—å:</b> {weather_data.get('visibility', 0)} –∫–º

üåÖ <b>–í–æ—Å—Ö–æ–¥:</b> {sunrise}
üåá <b>–ó–∞–∫–∞—Ç:</b> {sunset}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>
"""
    
    return message.strip()


def format_forecast_message(forecast_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã
    
    Args:
        forecast_data (Dict): –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if not forecast_data or not forecast_data.get('forecasts'):
        return "‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    city = forecast_data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    country = forecast_data.get('country', '')
    forecasts = forecast_data.get('forecasts', [])
    
    message = f"üìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π</b>\n"
    message += f"üìç <b>{city}, {country}</b>\n\n"
    
    for i, forecast in enumerate(forecasts):
        date_obj = forecast.get('date', datetime.now())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if i == 0:
            day_name = "–°–µ–≥–æ–¥–Ω—è"
        elif i == 1:
            day_name = "–ó–∞–≤—Ç—Ä–∞"
        else:
            day_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
            day_name = day_names[date_obj.weekday()]
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏
        weather_emoji = get_weather_emoji(forecast.get('icon', ''))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_str = date_obj.strftime('%d.%m')
        
        message += f"{weather_emoji} <b>{day_name}, {date_str}</b>\n"
        message += f"üå°Ô∏è {forecast.get('temp_min', 0)}¬∞...{forecast.get('temp_max', 0)}¬∞C\n"
        message += f"üìù {forecast.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        message += f"üíß {forecast.get('avg_humidity', 0)}% | üí® {forecast.get('avg_wind_speed', 0)} –º/—Å\n\n"
    
    message += f"<i>–ü—Ä–æ–≥–Ω–æ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>"
    
    return message.strip()


def get_weather_emoji(icon_code: str) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
    
    Args:
        icon_code (str): –ö–æ–¥ –∏–∫–æ–Ω–∫–∏ –∏–∑ API
        
    Returns:
        str: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏
    """
    emoji_map = {
        '01d': '‚òÄÔ∏è',    # clear sky day
        '01n': 'üåô',    # clear sky night
        '02d': '‚õÖ',   # few clouds day
        '02n': '‚òÅÔ∏è',    # few clouds night
        '03d': '‚òÅÔ∏è',    # scattered clouds
        '03n': '‚òÅÔ∏è',    # scattered clouds
        '04d': '‚òÅÔ∏è',    # broken clouds
        '04n': '‚òÅÔ∏è',    # broken clouds
        '09d': 'üåßÔ∏è',    # shower rain
        '09n': 'üåßÔ∏è',    # shower rain
        '10d': 'üå¶Ô∏è',    # rain day
        '10n': 'üåßÔ∏è',    # rain night
        '11d': '‚õàÔ∏è',    # thunderstorm
        '11n': '‚õàÔ∏è',    # thunderstorm
        '13d': '‚ùÑÔ∏è',    # snow
        '13n': '‚ùÑÔ∏è',    # snow
        '50d': 'üå´Ô∏è',    # mist
        '50n': 'üå´Ô∏è',    # mist
    }
    
    return emoji_map.get(icon_code, 'üå§Ô∏è')


def get_wind_direction(degrees: float) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ –ø–æ –≥—Ä–∞–¥—É—Å–∞–º
    
    Args:
        degrees (float): –ì—Ä–∞–¥—É—Å—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
        
    Returns:
        str: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
    """
    directions = [
        "–°", "–°–°–í", "–°–í", "–í–°–í",
        "–í", "–í–Æ–í", "–Æ–í", "–Æ–Æ–í",
        "–Æ", "–Æ–Æ–ó", "–Æ–ó", "–ó–Æ–ó",
        "–ó", "–ó–°–ó", "–°–ó", "–°–°–ó"
    ]
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä–∞–¥—É—Å—ã –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-360
    degrees = degrees % 360
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    index = round(degrees / 22.5) % 16
    
    return directions[index]


def format_temperature(temp: float, units: str = "metric") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    
    Args:
        temp (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        units (str): –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    """
    if units == "metric":
        return f"{round(temp)}¬∞C"
    elif units == "imperial":
        return f"{round(temp)}¬∞F"
    else:  # kelvin
        return f"{round(temp)}K"


def get_weather_advice(weather_data: Dict) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –ø–æ–≥–æ–¥–µ
    
    Args:
        weather_data (Dict): –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        
    Returns:
        str: –°–æ–≤–µ—Ç –ø–æ –ø–æ–≥–æ–¥–µ
    """
    temp = weather_data.get('temperature', 0)
    description = weather_data.get('description', '').lower()
    wind_speed = weather_data.get('wind_speed', 0)
    humidity = weather_data.get('humidity', 0)
    
    advice = []
    
    # –°–æ–≤–µ—Ç—ã –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
    if temp < -10:
        advice.append("üß• –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –û–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ")
    elif temp < 0:
        advice.append("‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∫—É—Ä—Ç–∫—É")
    elif temp < 10:
        advice.append("üß• –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ, –≤–æ–∑—å–º–∏—Ç–µ —Ç–µ–ø–ª—É—é –æ–¥–µ–∂–¥—É")
    elif temp > 25:
        advice.append("‚òÄÔ∏è –ñ–∞—Ä–∫–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–µ")
    elif temp > 30:
        advice.append("üå°Ô∏è –û—á–µ–Ω—å –∂–∞—Ä–∫–æ! –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã")
    
    # –°–æ–≤–µ—Ç—ã –ø–æ –æ—Å–∞–¥–∫–∞–º
    if any(word in description for word in ['–¥–æ–∂–¥—å', 'rain', 'shower']):
        advice.append("‚òÇÔ∏è –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç!")
    elif '—Å–Ω–µ–≥' in description or 'snow' in description:
        advice.append("‚ùÑÔ∏è –°–Ω–µ–≥! –û–±—É–≤—å —Å —Ö–æ—Ä–æ—à–∏–º –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–æ–º")
    elif '—Ç—É–º–∞–Ω' in description or 'mist' in description:
        advice.append("üå´Ô∏è –¢—É–º–∞–Ω, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –¥–æ—Ä–æ–≥–µ")
    
    # –°–æ–≤–µ—Ç—ã –ø–æ –≤–µ—Ç—Ä—É
    if wind_speed > 10:
        advice.append("üí® –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä! –ó–∞–∫—Ä–µ–ø–∏—Ç–µ –ª–µ–≥–∫–∏–µ –≤–µ—â–∏")
    
    # –°–æ–≤–µ—Ç—ã –ø–æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    if humidity > 80:
        advice.append("üíß –í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—É—à–Ω–æ")
    
    return " | ".join(advice) if advice else "üå§Ô∏è –•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫!"


def format_time_with_timezone(timestamp: datetime, timezone_offset: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    
    Args:
        timestamp (datetime): –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        timezone_offset (int): –°–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    tz = pytz.FixedOffset(timezone_offset // 60)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    local_time = timestamp.replace(tzinfo=pytz.UTC).astimezone(tz)
    
    return local_time.strftime('%H:%M')


def get_comfort_level(temp: float, humidity: int) -> tuple:
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–æ–º—Ñ–æ—Ä—Ç–∞ –ø–æ–≥–æ–¥—ã
    
    Args:
        temp (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        humidity (int): –í–ª–∞–∂–Ω–æ—Å—Ç—å
        
    Returns:
        tuple: (—É—Ä–æ–≤–µ–Ω—å_–∫–æ–º—Ñ–æ—Ä—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ)
    """
    # –ò–Ω–¥–µ–∫—Å –∂–∞—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    if temp >= 20 and temp <= 26 and humidity >= 40 and humidity <= 60:
        return ("üü¢", "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ")
    elif temp >= 15 and temp <= 30 and humidity >= 30 and humidity <= 70:
        return ("üü°", "–ü—Ä–∏–µ–º–ª–µ–º–æ")
    elif temp < 0 or temp > 35 or humidity > 85:
        return ("üî¥", "–ù–µ–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ")
    else:
        return ("üü†", "–¢–µ—Ä–ø–∏–º–æ")


def format_detailed_forecast(forecast_data: Dict) -> List[str]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ –¥–Ω—è–º)
    
    Args:
        forecast_data (Dict): –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    """
    if not forecast_data or not forecast_data.get('forecasts'):
        return ["‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"]
    
    messages = []
    forecasts = forecast_data.get('forecasts', [])
    
    for forecast in forecasts:
        date_obj = forecast.get('date', datetime.now())
        weather_emoji = get_weather_emoji(forecast.get('icon', ''))
        
        # –£—Ä–æ–≤–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–∞
        comfort_level, comfort_desc = get_comfort_level(
            (forecast.get('temp_min', 0) + forecast.get('temp_max', 0)) / 2,
            forecast.get('avg_humidity', 0)
        )
        
        # –°–æ–≤–µ—Ç –ø–æ –ø–æ–≥–æ–¥–µ
        advice = get_weather_advice({
            'temperature': (forecast.get('temp_min', 0) + forecast.get('temp_max', 0)) / 2,
            'description': forecast.get('description', ''),
            'wind_speed': forecast.get('avg_wind_speed', 0),
            'humidity': forecast.get('avg_humidity', 0)
        })
        
        message = f"""
{weather_emoji} <b>{date_obj.strftime('%A, %d %B')}</b>

üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {forecast.get('temp_min', 0)}¬∞ - {forecast.get('temp_max', 0)}¬∞C
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {forecast.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {forecast.get('avg_humidity', 0)}%
üí® <b>–í–µ—Ç–µ—Ä:</b> {forecast.get('avg_wind_speed', 0)} –º/—Å

{comfort_level} <b>–ö–æ–º—Ñ–æ—Ä—Ç:</b> {comfort_desc}

üí° <b>–°–æ–≤–µ—Ç:</b> {advice}
"""
        
        messages.append(message.strip())
    
    return messages
